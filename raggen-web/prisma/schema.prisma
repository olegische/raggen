// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Chat {
  id        String    @id @default(uuid())
  provider  String    // Тип провайдера (yandex/gigachat)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([provider]) // Индекс для быстрого поиска по провайдеру
}

model Message {
  id          Int      @id @default(autoincrement())
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id])
  message     String   // Сообщение пользователя
  response    String?  // Ответ от модели
  model       String   // Используемая модель
  provider    String   // Провайдер, который сгенерировал ответ
  timestamp   DateTime @default(now())
  temperature Float    // Параметр температуры
  maxTokens   Int      // Максимальное количество токенов
  embedding   Embedding? // Эмбеддинг сообщения
  usedContext Context[] // Контекст, использованный для этого сообщения

  @@index([chatId])
  @@index([timestamp])
}

model Embedding {
  id          Int      @id @default(autoincrement())
  messageId   Int?     @unique // Связь один-к-одному с сообщением
  message     Message? @relation(fields: [messageId], references: [id])
  vector      Bytes    // Эмбеддинг в бинарном формате (384 * 4 байта)
  vectorId    Int      // ID вектора в FAISS
  createdAt   DateTime @default(now())

  @@index([vectorId]) // Индекс для быстрого поиска по ID вектора
  @@index([messageId])
}

model Context {
  id          Int      @id @default(autoincrement())
  messageId   Int      // Сообщение, в котором использован контекст
  message     Message  @relation(fields: [messageId], references: [id])
  sourceId    Int      // ID исходного сообщения, использованного как контекст
  score       Float    // Оценка релевантности (0-1)
  usedInPrompt Boolean // Был ли контекст использован в промпте
  createdAt   DateTime @default(now())

  @@index([messageId])
  @@index([sourceId])
  @@index([score])
}

model Document {
  id          String   @id @default(uuid())
  name        String   // Имя файла
  type        String   // Тип файла (txt, md, html)
  size        Int      // Размер файла в байтах
  content     String   // Содержимое файла
  metadata    String?  // Дополнительные метаданные в формате JSON строки (автор, дата создания файла и т.д.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([createdAt])
}
