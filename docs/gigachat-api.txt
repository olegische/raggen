Начало работы с API
Обновлено 11 ноября 2024
В этом разделе вы узнаете как получить токен доступа и начать использовать GigaChat API.

Получение ключа авторизации﻿
Перед началом работы нужно сгенерировать ключ авторизации в проекте GigaChat API.

Подробнее об Authorization key
Ключ авторизации (англ. Authorization key) — строка, полученная в результате кодирования в Base64 клиентского идентификатора (Client ID) и ключа (Client Secret) API. Вы можете использовать готовый ключ из личного кабинета или самостоятельно закодировать Client ID и Client Secret.

Авторизационный ключ нужен для получения токена доступа Access token с помощью запроса POST /api/v2/oauth, который использует по Basic-схему аутентификации.
Для этого:

Откройте проект GigaChat API в личном кабинете Studio.

В левой панели выберите раздел Настройки API.

Нажмите кнопку Получить ключ.

Ключ авторизации могут получить только пользователи с ролями Владелец и Администратор — для остальных ролей кнопка Получить ключ будет неактивна.

Подробнее о ролях и их возможностях — в разделе Создание команды и управление доступами.

В открывшемся окне скопируйте и сохраните значение поля Authorization Key. Ключ авторизации, отображается только один раз и не хранятся в личном кабинете. При компрометации или утере ключа авторизации вы можете сгенерировать его повторно.

В разделе Настройка API вы также можете сохранить Client ID и Client Secret, чтобы создать ключ авторизации самостоятельно.

Получение токена доступа﻿
Токен доступа Access token нужен для авторизации запросов к GigaChat API по Bearer-схеме. Токен получается в обмен на ключ авторизации с помощью запроса POST /api/v2/oauth. Токен действителен в течение 30 минут.

Пример запроса для получения токена доступа:

curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Accept: application/json' \
-H 'RqUID: <уникальный_идетификатор_запроса>' \
-H 'Authorization: Basic authorization_key' \
--data-urlencode 'scope=GIGACHAT_API_PERS'

RqUID — уникальный идентификатор запроса. Соответствует формату uuid4.

Параметр для журналирования входящих вызовов и разбора инцидентов. Для создания уникального идентификатора можно использовать стандартные библиотеки и классы для генерации UUID и GUID.

Пример ответа:

{
  "access_token": "<токен_доступа>",
  "expires_at": 1706026848841
}

В справочной документации вы найдете подробное описание параметров запроса и ответа.

Также с помощью консоли вы сможете сгенерировать Access token.

Используйте полученный токен доступа для авторизации запросов к GigaChat API.

Запросы к GigaChat API﻿
Запросы к GigaChat API передаются по адресу https://gigachat.devices.sberbank.ru/ и авторизуются с помощью токена доступа Access token, который передан в заголовке Authorization. Подробное описание всех запросов к API — в справочной документации.

Вы также можете передавать запросы к моделям в раннем доступе. Их возможности могут отличаться от моделей, доступных в промышленном контуре.

Для обращения к моделям в раннем доступе передавайте запросы по адресу https://gigachat-preview.devices.sberbank.ru/.

Пример запроса на получение списка моделей:

curl https://gigachat.devices.sberbank.ru/api/v1/models \
  -H 'Authorization: Bearer <токен_доступа>' \

Запрос возвращает список моделей GigaChat:

{
    "object": "list",
    "data": [
        {
            "id": "GigaChat",
            "object": "model",
            "owned_by": "salutedevices"
        },
        {
            "id": "GigaChat-Pro",
            "object": "model",
            "owned_by": "salutedevices"
        },
    ]
}

Модели GigaChat обладают разными возможностями и тарифицируются по-разному.

Генерация текста и изображений﻿
За генерацию текста и изображений отвечает запрос POST /chat/completions. С помощью запросов на генерацию вы можете решать самые разные задачи: переводить, исправлять и стилизовать текст, генерировать краткое содержание статей и выделять из них основные идеи, создавать изображения и многое другое.

Запросы на генерацию тратят токены.

Токен — единица тарификации. Токен может быть символом, несколькими символами, фрагментом слова или словом целиком. В среднем в одном токене 3—4 символа, включая пробелы, знаки препинания и специальные символы.

Токены расходуются как на запрос, так и на ответ модели. Вы можете заранее оценить количество токенов в запросе с помощью запроса POST /tokens/count. Разные модели считают токены по-разному. Количество оставшихся токенов отображается в личном кабинете проекта GigaChat API. Если вы используете API как юридическое лицо или ИП, в вашем личном кабинете также будет доступен мониторинг потребления токенов.

Пример запроса на генерацию текста:

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer <токен_доступа>' \
--data-raw '{
  "model": "GigaChat",
  "messages": [
    {
      "role": "user",
      "content": "Привет! Как дела?"
    }
  ],
  "stream": false,
  "repetition_penalty": 1
}'

Пример ответа:

{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "message": {
        "content": "Все отлично, спасибо. А как ваши дела?",
        "role": "assistant"
      }
    }
  ],
  "created": 1706096547,
  "model": "GigaChat",
  "object": "chat.completion",
  "usage": {
    "completion_tokens": 12,
    "prompt_tokens": 173,
    "system_tokens": 0,
    "total_tokens": 185
  }
}

Если вы хотите получить наиболее сбалансированный ответ, не передавайте параметры temperature и top_p. В таком случае модель применит значения по умолчанию.

Подробное описание параметров — в справке API.

Создание эмбеддинга﻿
Для создания эмбеддингов используется запрос POST /embeddings. Эмбеддинги нужны для определения смыслового сходства текстов, что позволяет решать задачи вроде поиска, извлечения данных из текстов и других.

При создании эмбеддинга расходуются токены, также как и при генерации контента. Запросы на создание эмбеддингов передаются в модель Embeddings.

Подробнее о создании эмбеддингов читайте в разделе Векторное представление текста.

Пример запроса:

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/embeddings' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer <токен_доступа>' \
--data-raw '{
  "model": "Embeddings",
  "input": [
    "Расскажи о современных технологиях"
  ]
}'

Получаем Access token
Чтобы иметь возможность отправлять авторизованные запросы к API
Запрос для получения: POST /api/v2/oauth
Токен действует 30 минут. После его нужно запрашивать снова
Подробно о получении Access token
В запросе на получение токена доступа используется аутентификация по Basic-схеме, поэтому в заголовке Authorization нужно передать полученный Authorization key
Пример запроса
cURL
Python

curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Accept: application/json' \
-H 'RqUID: 4c1b9147-c4c5-4a1c-b75a-8bb47d6cdab6' \
-H 'Authorization: Basic <Authorization key>' \
--data-urlencode 'scope=GIGACHAT_API_PERS'
В ответе на запрос будет ваш Access token.
Используйте его для авторизации запросов к API
2
Отправляем запрос и получаем ответ
Попробуйте отправить свой первый запрос к GigaChat API на получение списка моделей, чтобы проверить работоспособность сервиса
Адрес для запросов к GigaChat API: https://gigachat.devices.sberbank.ru/
Руководства по работе с API
Для авторизации каждого запроса, в заголовке Authorization нужно передавать актуальный Access token
Пример запроса
cURL
Python

curl https://gigachat.devices.sberbank.ru/api/v1/models \
-H 'Accept: application/json' \
-H 'Authorization: Bearer <Access token>'

Выбор модели для генерации
Обновлено 11 ноября 2024
При работе с GigaChat с помощью API и SDK нужно выбирать модель, к которой будет сделан запрос. Разные модели можно использовать в разных сценариях. Подробное описание моделей — в разделе Модели GigaChat.

Чтобы задать модель, передайте ее название в поле model, в запросе POST /chat/completions:

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer <токен_доступа>' \
--data-raw '{
  "model": "<название_модели>",
  "messages": [
    {
      "role": "user",
      "content": "Привет! Расскажи о себе."
    }
  ],
  "n": 1,
  "stream": false,
  "max_tokens": 512,
  "repetition_penalty": 1,
  "update_interval": 0
}'

Возможные значения поля model:

GigaChat — подойдет для решения более простых задач, требующих при этом максимальной скорости работы модели. При этом стоимость работы с моделью ниже, так как для ее работы нужно меньше аппаратных ресурсов.
GigaChat-Pro — модель лучше следует сложным инструкциям и может выполнять более комплексные задачи: значительно повысилось качество суммаризации, переписывания и редактирования текстов, ответов на различные вопросы.


Модели GigaChat
Обновлено 19 ноября 2024
Сервис GigaChat дает доступ к нескольким моделям для генерации и одной модели для создания векторного представления текста.

В зависимости от задач вы можете использовать разные модели. При этом стоимость запросов будет отличаться. Информацию о тарифах, а также примеры расчетов ищите в разделе Тарифы и оплата.

Перед запуском в промышленном контуре новые версии моделей для генерации некоторое время работают в режиме раннего доступа.

Модели для генерации﻿
Для получения списка моделей, доступных для генерации, используйте запрос GET /models.

Для генерации доступны модели:

Название модели	Значение поля model	Размер контекста
в токенах	Поддержка
функций	Описание
GigaChat Lite	GigaChat	32768	да	Легкая модель для простых задач, требующих
максимальной скорости работы
GigaChat Pro	GigaChat-Pro	32768	да	Продвинутая модель для сложных задач, требующих
креативности и лучшего следования инструкциям
GigaChat Max	GigaChat-Max	32768	да	Продвинутая модель для сложных задач,
требующих высокого уровня креативности и качества работы
Чтобы получить ответ определенной модели, ее название нужно передать в поле model запроса POST /chat/completions:

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer <токен_доступа>' \
--data-raw '{
  "model": "GigaChat",
  "messages": [
    {
      "role": "system",
      "content": "Ты профессиональный переводчик на английский язык. Переведи точно сообщение пользователя."
    },
    {
      "role": "user",
      "content": "GigaChat — это сервис, который умеет взаимодействовать с пользователем в формате диалога, писать код, создавать тексты и картинки по запросу пользователя."
    }
  ],
  "stream": false,
  "update_interval": 0
}'

Модель для векторного представления текста﻿
Для векторного представления текстов доступна модель Embeddings:

Название модели	Значение поля model	Описание
Embeddings	Embeddings	Базовая модель, доступная по умолчанию для векторного представления текстов
Модель используется в запросах на создание эмбеддингов POST /embeddings:

{
  "model": "Embeddings",
  "input": [
    "Расскажи о современных технологиях"
  ]
}

Работа с историей чата
Обновлено 12 ноября 2024
Передача истории чата позволяет GigaChat работать с результатами прошлых запросов пользователя. Когда вы переписываетесь с нейросетевой моделью в веб-интерфейсе, она автоматически учитывает историю чата.

Если для обмена сообщениями вы используете GigaChat API, историю чата нужно передавать явно в поле messages запроса POST /chat/completions.

Пример запроса с историей чата:

curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer access_token' \
  -d '{
  "model": "GigaChat",
  "messages": [
        {
            "role": "user",
            "content": "Когда уже ИИ захватит этот мир?"
        },
        {
            "role": "assistant",
            "content": "Пока что это не является неизбежным событием. Несмотря на то, что искусственный интеллект (ИИ) развивается быстрыми темпами и может выполнять сложные задачи все более эффективно, он по-прежнему ограничен в своих возможностях и не может заменить полностью человека во многих областях. Кроме того, существуют этические и правовые вопросы, связанные с использованием ИИ, которые необходимо учитывать при его разработке и внедрении."
        },
        {
            "role": "user",
            "content": "Думаешь, у нас еще есть шанс?"
        }
    ],
}'

Кэширование запросов﻿
Вы можете использовать необязательный идентификатор сессии X-Session-ID для кэширования контекста разговора с GigaChat. Идентификатор передается в заголовке запроса и может содержать произвольную строку. Если при получении запроса, модель находит в кэше данные о запросе с таким же идентификатором и частично совпадающим контекстом, то она не пересчитывает этот контекст. Такой подход позволяет снизить время на генерацию ответа.

Кэширование позволяет снизить расходы на генерацию, благодаря тому, что модель тратит меньше токенов на обработку сообщений контекста с одинаковыми идентификаторами.

Кэширование изображений в настоящий момент не поддерживается.

Кэширование может быть полезно при:

разработке разговорных агентов, которые должны учитывать большой контекст для ведения диалога.
создании асситентов, которые помогают писать код. Например, вы можете закэшировать кодовую базу, которую модель должна будет учитывать при автодополнении.
работе с большими документами.
необходимости передать в модель большой набор инструкций. Например, вы можете сохранить в кэше множество различных примеров желаемого результата работы модели.
многократном вызове функций, для сохранения результатов вызовов.
Пример запроса с заголовком X-Session-ID, в котором передан идентификатор в формате uuid4:

curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer access_token' \
  -H 'X-Session-ID: dfa87a40-99a9-42c4-b810-6c7caa1e1e8b' \
  -d '{
  "model": "GigaChat",
  "messages": [
        {
            "role": "user",
            "content": "Запрос пользователя"
        },
        {
            "role": "assistant",
            "content": "Ответ модели"
        },
        {
            "role": "user",
            "content": "Запрос пользователя"
        }
    ],
}'


Потоковая генерация токенов
Обновлено 11 ноября 2024
Режим получения потока токенов поможет обрабатывать ответ GigaChat по мере его генерации.

При включении этого режима GigaChat передает токены в потоке коротких сообщений, формат которых соответствует протоколу server-sent events. Последним в потоке будет событие data: [DONE].

Вы можете включить потоковую генерацию токенов. Для этого в запросе POST /chat/completions нужно передать параметр "stream": true.

Пример запроса:

curl https://gigachat.devices.sberbank.ru/api/v1/chat/completions \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer Token ***' \
  -d '{
  "model": "GigaChat",
  "messages": [{"role": "user", "content": "Say this is a test!"}],
  "stream": true
}'

Пример потока событий:

data: 
{
    "choices":
    [
        {
            "delta":
            {
                "content": "GigaСhat",
                "role": "assistant"
            },
            "index": 0
        }
    ],
    "created": 1683034756,
    "model": "GigaChat",
    "object": "chat.completion"
}

data:
{
    "choices":
    [
        {
            "delta":
            {
                "content": " спешит"
            },
            "index": 0
        }
    ],
    "created": 1683034756,
    "model": "GigaChat",
    "object": "chat.completion"
}

data:
{
    "choices":
    [
        {
            "delta":
            {
                "content": " на"
            },
            "index": 0
        }
    ],
    "created": 1683034756,
    "model": "GigaChat",
    "object": "chat.completion"
}

data:
{
    "choices":
    [
        {
            "delta":
            {
                "content": " помощь"
            },
            "index": 0
        }
    ],
    "created": 1683034756,
    "model": "GigaChat",
    "object": "chat.completion"
}

data: [DONE]

Векторное представление текста
Обновлено 14 ноября 2024
Эмбеддинг (англ. embedding) — это вектор в виде массива чисел, который получается после преобразования текста языковой моделью. Полученный вектор можно использовать для измерения семантического сходства преобразованного текста. Комбинация чисел, составляющих вектор, действует как многомерная карта для измерения сходства.

Векторное представление текста (эмбеддинг) используется для:

улучшения качества поиска — эмбеддинги позволяют оценивать сходство между текстовыми запросами на основе расстояния между соответствующими векторами. Это позволяет улучшить качество поиска и релевантность результатов;
уменьшения размерности данных — с помощью эмбеддингов вы можете представить текстовые запросы в виде числовых векторов, что позволяет снизить размерность данных и ускорить их обработку;
обеспечения универсальности — эмбеддинги можно использовать для различных задач обработки естественного языка, таких как Retrieval Augmented Generation (RAG), классификация текстов, кластеризация и других.
Для преобразования строк в эмбеддинги в GigaChat API есть метод POST /embeddings. Запрос выполняется к модели Embeddings ("model": "Embeddings") и авторизуется с помощью токена доступа. Для работы с моделью и создания эмбеддингов вы также можете использовать GigaChain.

Создание эмбеддингов оплачивается отдельно от генерации текста.

Подробнее в разделе Тарифы и оплата.

Пример запроса на создание эмбеддинга:

curl https://gigachat.devices.sberbank.ru/api/v1/embeddings \
  --header 'Content-Type: application/json' \
  --header 'Authorization: Bearer <токен доступа>' \
  --data '{
    "model": "Embeddings",
    "input": [
        "Расскажи о современных технологиях",
        "Какие новинки в мире IT?"
    ]
  }'

Параметры запроса:

model
required
string
По умолчанию: "Embeddings"
Название модели, которая будет использована для создания эмбеддинга.

input
required
Array of strings
Строка или массив строк, которые будут использованы для генерации эмбеддинга.

Пример ответа:

{
  "object": "list",
  "data": [
    {
      "object": "embedding",
      "embedding": [
        0.0023064255,
        -0.009327292,
        ...
        -0.0028842222
      ],
      "index": 0
    }
  ],
  "model": "Embeddings"
}

Параметры ответа:

object
required
string
По умолчанию: "list"
Формат структуры данных.

data
required
Array of objects[ элементы ]
Array 
object
required
string
Default: "embedding"
Тип объекта.

embedding
required
Array of integers <float> [ items <float > ]
Массив чисел, представляющих значения эмбеддинга для предоставленного текста.

index
required
integer
Индекс соответствующий индексу текста, полученного в массиве input запроса.

usage
required
object
prompt_tokens	
number
Количество токенов в строке, для которой сгенерирован эмбеддинг.

model	
string
По умолчанию: "Embeddings"
Название модели, которая используется для вычисления эмбеддинга.

Использование эмбеддингов для поиска﻿
Поиск по неструктурированному тексту — один из наиболее распространненых сценариев использования эмбеддингов. Для этого:

Создайте векторное представление текста, по которому будет выполняться поиск.
Сохраните эмбеддинг в векторной базе данных.
Выполните запрос к базе.
Ниже показан простой пример реализации поиска по эмбеддингу, реализованный с помощью GigaChain и векторного хранилища Chroma.

Пример демонстрирует поиск по документам — экземплярам GigaChain-класса Document, который представляет единицу текста и связанные с ним метаданные. Класс имеет два атрибута:

page_content — строку, представляющую содержимое;
metadata — словарь, содержащий произвольные метаданные.
Атрибут metadata может содержать данные об источнике документа, его связи с другими документами и другую дополнительную информацию.

Для запуска примера установите зависимости:

pip install langchain langchain-community langchain-chroma

Создайте несколько документов и сохраните их в векторном хранилище:

from langchain_core.documents import Document
from langchain_chroma import Chroma
from langchain_gigachat.embeddings import GigaChatEmbeddings

# Список документов, по которым будет выполняться поиск
documents = [
    Document(
        page_content="Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.",
        metadata={"source": "mammal-pets-doc"},
    ),
    Document(
        page_content="Кошки — независимые животные, которым нужно собственное пространство.",
        metadata={"source": "mammal-pets-doc"},
    ),
    Document(
        page_content="Золотые рыбки — отличные домашние животные для начинающих. За ними достаточно просто ухаживать.",
        metadata={"source": "fish-pets-doc"},
    ),
    Document(
        page_content="Попугаи — умные птицы, которые способны имитировать человеческую речь.",
        metadata={"source": "bird-pets-doc"},
    ),
    Document(
        page_content="Кролики — социальные животные, которым нужно много места, чтобы прыгать.",
        metadata={"source": "mammal-pets-doc"},
    ),
]

# Создайте векторное хранилище и передайте в него список документов и модель для создания векторного представления
vectorstore = Chroma.from_documents(
    documents,
    embedding = GigaChatEmbeddings(
    credentials="ключ_авторизации", scope="GIGACHAT_API_PERS", verify_ssl_certs=False
    ),
)

Теперь вы можете использовать методы vectorstore для выполнения поиска по документам.

Поиск по документам на основе схожести с тексовым запросом:

vectorstore.similarity_search("кошка")

Результат поиска:

[Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Оценка схожести запроса и содержимого хранилища:

# Оценка зависит от выбранного векторного хранилища.
# Chroma возвращает метрику расстояния, которая должна варьироваться обратно пропорционально схожести.

vectorstore.similarity_search_with_score("кошка")

Результат оценки:

[(Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}),
  218.2356719970703),
 (Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}),
  319.75384521484375),
 (Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}),
  349.84930419921875),
 (Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'}),
  352.6993103027344)]

Поиск документов на основе схожести с запросом, представленным в виде вектора:

embedding = GigaChatEmbeddings(
    credentials="ключ_авторизации", scope="GIGACHAT_API_PERS", verify_ssl_certs=False
    )

embedded_query = embedding.embed_query("кошка")

vectorstore.similarity_search_by_vector(embedded_query)

Результат поиска:

[Document(page_content='Кошки — независимые животные, которым нужно собственное пространство.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Собаки — отличные компаньоны, которые известны своей преданностью и дружелюбием.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Кролики — социальные животные, которым нужно много места, чтобы прыгать.', metadata={'source': 'mammal-pets-doc'}),
 Document(page_content='Попугаи — умные птицы, которые способны имитировать человеческую речь.', metadata={'source': 'bird-pets-doc'})]

Обработка файлов
Обновлено 14 ноября 2024
Модели GigaChat умеют обрабатывать текстовые документы и изображения, и использовать их при генерации ответов. Для этого вы можете загрузить необходимые файлы в хранилище и передать запрос с идентификатором файла в выбранную модель GigaChat. При генерации ответа, модель будет учитывать указанное изображение.

Работа с хранилищем файлов﻿
Хранилище файлов позволяет получить идентификатор файла, который можно использовать при запросе к модели. Для работы с хранилищем GigaChat API предоставляет методы:

POST /files;
GET /files;
GET /files/{file};
POST /files/{file}/delete.
Загрузка файла в хранилище﻿
Для загрузки файла в хранилище используйте метод POST /files. Загруженные файлы будут доступны только вам.

Хранилище поддерживает текстовые документы и изображения разных форматов.

Формат	MIME-тип
txt	text/plain
doc	application/vnd.openxmlformats-officedocument.wordprocessingml.document
docx	application/msword
pdf	application/pdf
На размеры файлов действуют ограничения:

максимальный размер одного текстового файла в запросе — 30 Мб;
максимальный размер одного изображения в запросе — 15 Мб.
Чтобы модель использовала файл для генерации, укажите его идентификатор в массиве attachments, в запросе на генерацию POST /chat/completions.

Пример запроса для загрузки файлов:

curl --location --request POST 'https://gigachat.devices.sberbank.ru/api/v1/files' \
--header 'Authorization: Bearer access_token' \
--form 'file=@"<путь_к_файлу>/example.jpeg"' \
--form 'purpose="general"'

В запросе обязательно нужно указать значение поля purpose="general". Это позволит использовать файл в запросах на генерацию ответов.

В ответ вы получите объект с описанием файла:

{
  "bytes": 120000,
  "created_at": 1677610602,
  "filename": "file123",
  "id": "6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e",
  "object": "file",
  "purpose": "general",
  "access_policy": "private"
}

Описание параметров — в справке API.

Получение информации о файлах﻿
Для получения информации о доступных в хранилище файлах GigaChat API предоставляет два метода: GET /files и GET /files/{file}.

Для получения списка всех доступных вам файлов используйте метод GET /files:

curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer access_token'

Для получения информации об отдельном файле используйте метод GET /files/{file}:

curl -L -X GET 'https://gigachat.devices.sberbank.ru/api/v1/files/:file' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer access_token'

Удаление файла из хранилища﻿
Для удаления файла из хранилища используйте метод POST /files/{file}/delete. В параметрах пути укажите идентификатор файла, который был получен при его загрузке в хранилище:

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/files/:file/delete' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer access_token'


После удаления файл нельзя будет использовать для генерации.

Использование файлов для генерации ответов﻿
После загрузки файла в хранилище и получения его идентификатора, вы можете использовать его в запросах на генерацию.

Для этого передайте идентификаторы файлов, которые нужно использовать для генерации, в массиве attachments.

Использование текстовых файлов﻿
Вы можете указать любое количество текстовых документов, которые должны учитываться при генерации ответов

Примеры запросов на генерацию с использованием загруженных текстовых документов.

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer access_token' \
--data-raw '{
  "model": "GigaChat",
  "messages": [
    {
      "role": "user",
      "content": "Расскажи вкратце, что изложено в документе?",
      "attachments": [
        "80e0bcd5-2b78-4fa7-8783-903995f56b4b",
        "1460d895-2b26-4ce0-8b0d-cc7665a969df"
      ]
    }
  ],
  "stream": false,
  "update_interval": 0
}'

Использование изображений﻿
В одном сообщении (объект в массиве messages) можно передать только одно изображение. В одном запросе можно передать до 10 изображений, независимо от количества сообщений.

При этом общий размер запроса должен быть меньше 20 Мб.

Например, ваш запрос может включать текст промпта и два идентификатора изображений, которые ссылаются на файлы размерами 6 Мб и 12 Мб.

Примеры запросов на генерацию с использованием загруженных изображений.

curl -L -X POST 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Authorization: Bearer access_token' \
--data-raw '{
  "model": "GigaChat-Pro",
  "messages": [
    {
      "role": "user",
      "content": "Что изображено на рисунке?",
      "attachments": [
        "80e0bcd5-2b78-4fa7-8783-903995f56b4b"
      ]
    }
  ],
  "stream": false,
  "update_interval": 0
}'

Тарификация изображений﻿
При отправке изображений в GigaChat они преобразуются в токены. Количество токенов после преобразования зависит от размера и разрешения изображения. Максимальное количество токенов, которые могут быть потрачены на обработку изображения — 1792.

Токены оплачиваются в соответствии с тарифами GigaChat API.

